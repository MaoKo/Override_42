
format ELF executable $03
entry _start

struc string data*& {
    .: db data
    .length = ($ - .)
}

struc auth data*& {
    local _seed, _exit, _current, _start, _length
    if (~(definite __auth_virtual))
        virtual at $00
            __auth_virtual::
        end virtual
    end if
    virtual __auth_virtual
        _start = $
        db data
        _length = ($ - _start)
    end virtual
    . = $00
    _exit = $00
    if (_length > $05)
        load _seed byte from __auth_virtual:(_start+$03)
        _seed = (_seed xor $1337) + $5EEDED
        repeat _length
            load _current byte from __auth_virtual:(_start+(%-$01))
            if (_current <= $1F)
                _exit = $01
                break
            end if
            _current = _current xor _seed
            _seed = _seed + (_current mod $0539)
        end repeat
        if (~(_exit))
            . = _seed
        end if
    end if
}

macro itoa2Dec number* {
    local _number, _modulo, _length
    _number = (number)
    if (_number < $00)
        db "-"
        _number = (-_number)
    end if
    _length = $00
    if (~(definite __itoa2Dec_virtual))
        virtual at $00
            __itoa2Dec_virtual::
        end virtual
    end if
    assert (_number eqtype $00)
    while _number
        _modulo = _number mod $0A
        _number = _number / $0A
        _length = _length + $01
        virtual __itoa2Dec_virtual
            db (_modulo+"0")
        end virtual
    end while
    repeat _length
        virtual __itoa2Dec_virtual
            load _number byte from __itoa2Dec_virtual:($-%)
        end virtual
        db _number
    end repeat
}

struc timespec {
    .tv_sec: rq $01
    .tv_nsec: rq $01
}

virtual at $00
    timespec timespec
    timespec.sizeof = $
end virtual

segment executable readable
_start:
    and esp, not $0F
    sub esp, $08
    mov eax, $2A
    mov ebx, esp
    int $80
    test eax, eax
    jnz .exit
    mov eax, $04
    mov ebx, dword [esp+$04]
    mov ecx, _payload
    mov edx, _payload.length
    int $80
    mov eax, $3F
    mov ebx, dword [esp]
    xor ecx, ecx
    int $80
    mov eax, $02
    int $80
    test eax, eax
    jz .child
    mov ecx, timespec.sizeof
    sub esp, ecx
    xor al, al
    mov edi, esp
    rep stosb
    mov byte [esp+timespec.tv_sec], $01
    mov eax, $A2
    mov ebx, esp
    xor ecx, ecx
    int $80
    add esp, timespec.sizeof
    mov eax, $04
    mov ebx, dword [esp+$04]
    mov ecx, _command
    mov edx, _command.length
    int $80
    jmp .exit
.child:
    mov eax, $0B
    mov ebx, _program
    xor edx, edx
    push edx ebx
    mov ecx, esp
    int $80
.exit:
    mov eax, $01
    xor ebx, ebx
    int $80

segment readable

_program: db "/home/users/level06/level06", $00
_command string "cat /home/users/level07/.pass", $0A

_login equ $2F, $2F, $2F, $2F, $2F, $2F
_serial auth _login

_payload:

db _login, $0A
itoa2Dec _serial
db $0A

_payload.length = ($ - _payload)

