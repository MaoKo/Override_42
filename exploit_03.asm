
format ELF executable $03
entry _start

struc string data*& {
    .: db data
    .length = ($ - .)
}

struc timespec {
    .tv_sec: rq $01
    .tv_nsec: rq $01
}

virtual at $00
    timespec timespec
    timespec.sizeof = $
end virtual

segment executable readable
_start:
    and esp, not $0F
    sub esp, $08
    mov eax, $2A
    mov ebx, esp
    int $80
    test eax, eax
    jnz .exit
    mov eax, $04
    mov ebx, dword [esp+$04]
    mov ecx, _argument
    mov edx, _argument.length
    int $80
    mov eax, $3F
    mov ebx, dword [esp]
    xor ecx, ecx
    int $80
    mov eax, $02
    int $80
    test eax, eax
    jz .child
    mov ecx, timespec.sizeof
    sub esp, ecx
    xor al, al
    mov edi, esp
    cld
    rep stosb
    mov byte [esp+timespec.tv_sec], $01
    mov eax, $A2
    mov ebx, esp
    xor ecx, ecx
    int $80
    add esp, timespec.sizeof
    mov eax, $04
    mov ebx, dword [esp+$04]
    mov ecx, _command
    mov edx, _command.length
    int $80
    jmp .exit
.child:
    mov eax, $0B
    mov ebx, _program
    xor edx, edx
    push edx ebx
    mov ecx, esp
    int $80
.exit:
    mov eax, $01
    xor ebx, ebx
    int $80

segment readable

_argument string "322424827", $0A
_command string "cat /home/users/level04/.pass", $0A
_program: db "/home/users/level03/level03", $00

